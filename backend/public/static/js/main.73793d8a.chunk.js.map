{"version":3,"sources":["config.js","components/LoggedInContext.js","components/ProtectedRoute.js","components/Signup.js","crud.js","components/Login.js","components/Forgotpw.js","components/Home.js","components/EditUserModal.js","components/UserCard.js","components/EditUsers.js","components/MainRouter.js","App.js","serviceWorker.js","index.js"],"names":["uriBase","LoggedInContext","React","createContext","LoggedInProvider","props","useState","users","setUsers","loggedIn","setLoggedIn","token","setToken","Provider","value","checkUser","userName","password","rtnValue","fetch","method","headers","body","JSON","stringify","then","httpResponse","ok","Error","json","response","console","log","Response","hasOwnProperty","authenticated","catch","error","message","children","LoggedInConsumer","Consumer","ProtectedRoute","Component","component","rest","render","to","Signup","setUserName","setPassword","useContext","Form","Group","controlId","Label","Control","type","placeholder","onChange","event","preventDefault","target","Button","variant","onClick","endpoint","doc","err","createOne","Login","username","Forgotpw","Home","map","user","key","EditUserModal","show","setShow","handleClose","Fragment","Modal","onHide","Header","closeButton","Title","Body","Footer","refresh","UserCard","Card","style","width","Img","src","Text","result","EditUsers","allUsers","useEffect","_id","MainRouter","path","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73793d8a.chunk.js","sourcesContent":["    //  configure our api endpoints\r\n    const uriBase = (process.env.NODE_ENV !== \"production\" ? (\r\n        \"http://localhost:3000\"\r\n    ) : (\r\n        \"https://immersive-demo.herokuapp.com\"\r\n    )\r\n )\r\n\r\n const apiVer = \"api/v1\"\r\n\r\n export {uriBase, apiVer}","import React from \"react\";\r\nimport { uriBase, apiVer } from \"../config\";\r\n\r\nconst LoggedInContext = React.createContext();\r\n\r\n// or you could do it \"const loggedInProvider = () => {\"\r\n\r\nconst LoggedInProvider = (props) => {\r\n  let [users, setUsers] = React.useState([]);\r\n  let [loggedIn, setLoggedIn] = React.useState(false);\r\n  let [token, setToken] = React.useState('')\r\n\r\n  // toDo\r\n  // function to update password\r\n  \r\n\r\n  \r\n  // function to check user\r\n  const checkUser = (userName, password) => {\r\n    let rtnValue = false;\r\n// if user exists then set new password\r\n    fetch(`${uriBase}/${apiVer}/login`, \r\n    {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"content-Type\": \"application/json\"\r\n    },\r\n      body: JSON.stringify({ userName, password }),\r\n    })\r\n      .then((httpResponse) => {\r\n        if (!httpResponse.ok) {\r\n          throw new Error(\"Login Error\");\r\n        }\r\n\r\n        // convert json from endpoint into a js object\r\n        return httpResponse.json()\r\n      })\r\n      .then(response => {\r\n\r\n        console.log(Response)\r\n        if (response.hasOwnProperty('authenticated')) {\r\n\r\n              setLoggedIn(response.authenticated)\r\n\r\n              if (response.authenticated === true) {\r\n                setToken(response.token)\r\n              }\r\n              rtnValue = response.authenticated\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error.message)\r\n      });\r\n\r\n    return rtnValue;\r\n  };\r\n\r\n\r\n  return (\r\n    <LoggedInContext.Provider\r\n      value={{users, loggedIn, checkUser, setUsers, token}}\r\n    >\r\n      {props.children}\r\n    </LoggedInContext.Provider>\r\n  );\r\n};\r\nconst LoggedInConsumer = LoggedInContext.Consumer;\r\nexport { LoggedInContext, LoggedInProvider, LoggedInConsumer };\r\n","import React from 'react'\r\nimport {Route, Redirect} from 'react-router-dom'\r\nimport {LoggedInConsumer} from './LoggedInContext'\r\n\r\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\r\n\r\n    return (\r\n        \r\n        <LoggedInConsumer>\r\n            {\r\n             ({loggedIn}) => (\r\n                 <Route\r\n                    render={props =>\r\n                        loggedIn ? <Component {...props} /> : <Redirect to=\"/\" />\r\n                    }\r\n                    {...rest}\r\n                />\r\n              )\r\n             \r\n            }\r\n        </LoggedInConsumer>\r\n    )\r\n}\r\n\r\nexport default ProtectedRoute","import React, {useContext} from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Link } from 'react-router-dom'\r\nimport {uriBase, apiVer} from '../config'\r\nimport {LoggedInConsumer, LoggedInContext} from \"./LoggedInContext\"\r\nimport {createOne} from '../crud'\r\n\r\nconst Signup = (props) => {\r\n\r\nlet [userName,setUserName] = React.useState(\"\")\r\nlet [password,setPassword] = React.useState(\"\")\r\n\r\nlet {token} = useContext(LoggedInContext)\r\nconst usernameOnChangeHandler = (event) => {\r\n\r\n    event.preventDefault()\r\n    setUserName(event.target.value)\r\n}\r\n\r\nconst passwordOnChangeHandler = (event) => {\r\n\r\n    event.preventDefault()\r\n    setPassword(event.target.value)\r\n}\r\n\r\nconst submitOnClickHandler = (event) => {\r\n    event.preventDefault()\r\n\r\n        try{\r\n    createOne(`${uriBase}/${apiVer}/users`, token ,{userName,password})\r\n    console.log(\"added\")\r\n        } \r\n        catch (err) {\r\n            console.log(err.message)\r\n        }\r\n    // check to see if user exists\r\n\r\n    // if exists check password\r\n}\r\n\r\nreturn (\r\n    <div>\r\n    <Form>\r\n        <Form.Group controlId=\"signUpUserName\">\r\n        <Form.Label>Username</Form.Label>\r\n        <Form.Control type=\"text\" placeholder=\"Username\" onChange={usernameOnChangeHandler}value={userName}/>\r\n    </Form.Group>\r\n\r\n        <Form.Group controlId=\"signUpPassword\">\r\n        <Form.Label> New Password</Form.Label>\r\n        <Form.Control type=\"password\" placeholder=\"Password\" onChange={passwordOnChangeHandler}value={password}/>\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\" onClick={submitOnClickHandler}>\r\n            Submit\r\n        </Button>\r\n\r\n    </Form>\r\n    <br></br>\r\n    <Link to='/'>Home</Link>\r\n    <LoggedInConsumer>\r\n    {\r\n        value => (\r\n\r\n            value.loggedIn ? (\r\n                    <h3>Logged In</h3>\r\n            ) : (\r\n                    <h3>Not Logged In</h3>\r\n                )\r\n\r\n        )\r\n\r\n    }\r\n    </LoggedInConsumer>\r\n\r\n</div>\r\n    );\r\n};\r\n\r\nexport default Signup;\r\n","// this file handles the api calls to our backend\r\n// functions require an api endpoint a token and a doc\r\n\r\n// create a record\r\nconst createOne = (endpoint, token, doc) => {\r\n  \r\n  console.log(doc);\r\n  return fetch(endpoint, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"authorization\": `Bearer ${token}`\r\n    },\r\n    body: JSON.stringify(doc),\r\n  })\r\n    .then((httpResponse) => {\r\n      if (!httpResponse.ok) {\r\n        throw new Error(`Error with POST at ${endpoint}`);\r\n      }\r\n\r\n      return httpResponse.json();\r\n    })\r\n    .catch((err) => {\r\n      throw err;\r\n    });\r\n};\r\n\r\n// Get all\r\nconst getAll = (endpoint) => {\r\n  return fetch(endpoint, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((httpResponse) => {\r\n      if (!httpResponse.ok) {\r\n        throw new Error(`Error with GET at ${endpoint}`);\r\n      }\r\n\r\n      return httpResponse.json();\r\n    })\r\n    .catch((err) => {\r\n      throw err;\r\n    });\r\n};\r\n// Get One\r\nconst getOne = () => {\r\n\r\n};\r\n//  Patch One\r\nconst patchOne = (endpoint, doc) => {\r\n\r\n     return fetch(endpoint, {\r\n          method: \"PATCH\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(doc)\r\n        })\r\n        .then((httpResponse) => {\r\n\r\n        if (!httpResponse.ok) {\r\n              throw new Error(`Error with PUT at ${endpoint}`);\r\n            }\r\n            return httpResponse.json();\r\n          })\r\n          .catch((err) => {\r\n            throw err;\r\n          });\r\n      };\r\n\r\n// Update one\r\nconst updateOne = (endpoint, doc) => {\r\n  return fetch(endpoint, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(doc),\r\n  })\r\n    .then((httpResponse) => {\r\n      if (!httpResponse.ok) {\r\n        throw new Error(`Error with PUT at ${endpoint}`);\r\n      }\r\n      return httpResponse.json();\r\n    })\r\n    .catch((err) => {\r\n      throw err;\r\n    });\r\n};\r\n\r\n// Delete one\r\nconst deleteOne = (endpoint) => {\r\n  return fetch(endpoint, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((httpResponse) => {\r\n      if (!httpResponse.ok) {\r\n        throw new Error(`Error with DELETE at ${endpoint}`);\r\n      }\r\n\r\n      return httpResponse.json();\r\n    })\r\n    .catch((err) => {\r\n      throw err;\r\n    });\r\n};\r\n\r\nexport { createOne, getAll, getOne,patchOne, updateOne, deleteOne };\r\n","    import React from \"react\";\r\n    import Form from \"react-bootstrap/Form\";\r\n    import Button from \"react-bootstrap/Button\";\r\n    import { Link } from 'react-router-dom'\r\n    import {LoggedInConsumer, LoggedInContext} from \"./LoggedInContext\"\r\n\r\n    const Login = (props) => {\r\n\r\n    let [username,setUserName] = React.useState(\"\")\r\n    let [password,setPassword] = React.useState(\"\")\r\n    // context\r\n    let {checkUser} = React.useContext(LoggedInContext)\r\n\r\n    const usernameOnChangeHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n        setUserName(event.target.value)\r\n    }\r\n\r\n    const passwordOnChangeHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const submitOnClickHandler = (event) => {\r\n        event.preventDefault()\r\n\r\n        // check to see if user exists\r\n        checkUser(username, password)\r\n        // if exists check password\r\n\r\n        //display result\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <Form>\r\n            <Form.Group controlId=\"loginUserName\">\r\n            <Form.Label>Username</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"Username\" onChange={usernameOnChangeHandler}value={username}/>\r\n        </Form.Group>\r\n\r\n            <Form.Group controlId=\"loginPassword\">\r\n            <Form.Label> New Password</Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"Password\" onChange={passwordOnChangeHandler}value={password}/>\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\" onClick={submitOnClickHandler}>\r\n                Submit\r\n            </Button>\r\n\r\n        </Form>\r\n        <br></br>\r\n        <Link to='/'>Home</Link>\r\n        <LoggedInConsumer>\r\n            {\r\n            value => (\r\n\r\n                value.loggedIn ?\r\n                (\r\n                    <h3>Logged In</h3>\r\n                ) : (\r\n                    <h3>Not Logged In</h3>\r\n                )\r\n            \r\n                        )\r\n          }\r\n            </LoggedInConsumer>\r\n    </div>\r\n    );\r\n    };\r\n\r\n    export default Login;\r\n","    import React from \"react\";\r\n    import Form from \"react-bootstrap/Form\";\r\n    import Button from \"react-bootstrap/Button\";\r\n    import {Link} from \"react-router-dom\";\r\n    import {LoggedInConsumer} from \"./LoggedInContext\"\r\n    import {uriBase, apiVer} from \"../config\"\r\n    import {patchOne} from \"../crud\"\r\n\r\n    const Forgotpw = (props) => {\r\n\r\n    let [userName,setUserName] = React.useState(\"\")\r\n    let [password,setPassword] = React.useState(\"\")\r\n\r\n\r\n    const usernameOnChangeHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n        setUserName(event.target.value)\r\n    }\r\n\r\n    const passwordOnChangeHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const submitOnClickHandler = (event) => {\r\n        \r\n        event.preventDefault()\r\n\r\n        try{\r\n            patchOne(`${uriBase}/${apiVer}/users/${userName}`,{password})\r\n            console.log(\"Patched\")\r\n        }\r\n        catch (err) {\r\n            console.log(err.message)\r\n    }\r\n}\r\n\r\n    return (\r\n        <div>\r\n        <Form>\r\n            <Form.Group controlId=\"forgotPassUserName\">\r\n            <Form.Label>Username</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"Username\" onChange={usernameOnChangeHandler}value={userName}/>\r\n        </Form.Group>\r\n\r\n            <Form.Group controlId=\"forgotPassPassword\">\r\n            <Form.Label> New Password</Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"New Password\" onChange={passwordOnChangeHandler}value={password}/>\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\" onClick={submitOnClickHandler}>\r\n                Submit\r\n            </Button>\r\n\r\n        </Form>\r\n        <br></br>\r\n    <Link to='/'>Home</Link>\r\n    <LoggedInConsumer>\r\n            {\r\n            value => (\r\n\r\n                value.loggedIn ?\r\n                (\r\n                    <h3>Logged In</h3>\r\n                ) : (\r\n                    <h3>Not Logged In</h3>\r\n                )\r\n            \r\n                        )\r\n          }\r\n            </LoggedInConsumer>\r\n    </div>\r\n    );\r\n    };\r\n\r\n    export default Forgotpw;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport { LoggedInContext} from \"./LoggedInContext\"\r\n \r\nfunction Home(props) {\r\n\r\n    let {users, loggedIn} = React.useContext(LoggedInContext)\r\n\r\n    const isloggedIn = () => {\r\n        \r\n        if (loggedIn) {\r\n            return (<h3>Logged In</h3>)\r\n        } else {\r\n            return (<h3>Not Logged In</h3>)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n                users.map(user => {\r\n                    return <li key={user.username}>{user.username}</li>\r\n                })\r\n            }\r\n            <br></br>\r\n            <Link to=\"signup\">Sign Up</Link>\r\n            <br></br>\r\n            <Link to=\"login\">Login</Link>\r\n            <br></br>\r\n            <Link to=\"Forgotpw\">Forgot Password</Link>\r\n            <br></br>\r\n            <Link to=\"admin\">Edit Users</Link>\r\n            {/* terniary statement */}\r\n            {isloggedIn()}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n \r\nexport default Home;","import React, {useState} from 'react';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport {updateOne} from '../crud'\r\nimport {uriBase,apiVer} from '../config'\r\n\r\nconst EditUserModal = (props) => {\r\n \r\n    const [show, setShow] = useState(false);\r\n    const [userName, setUserName] = useState(props.user.userName)\r\n    const [password, setPassword] = useState(props.password)\r\n \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n \r\n    const userNameOnChangeHandler = (event) => {\r\n \r\n        event.preventDefault()\r\n        setUserName(event.target.value)\r\n    }\r\n \r\n    const passwordOnChangeHandler = (event) => {\r\n \r\n        event.preventDefault()\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const saveOnClickHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n\r\n    try {  \r\n        updateOne(`${uriBase}/${apiVer}/users/${props.user.userName}`,{ userName, password })\r\n        console.log(\"updated\")\r\n\r\n    } \r\n    catch (err) {\r\n        console.log(err.message)\r\n    }\r\n\r\n    setShow(false)\r\n    props.refresh()\r\n}\r\n \r\n    return (\r\n        <React.Fragment>\r\n\r\n\r\n            <Button variant=\"primary\" onClick={handleShow}>Edit</Button>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>{`Editing ${userName}`}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                <Form>\r\n                <Form.Group controlId=\"editUserModalUserName\">\r\n                    <Form.Label>Username</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Username\" onChange={userNameOnChangeHandler} value={userName} />\r\n                </Form.Group>\r\n \r\n                <Form.Group controlId=\"editUserModalPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control type=\"password\" placeholder=\"Password\" onChange={passwordOnChangeHandler} value={password} />\r\n                </Form.Group>\r\n            </Form>                   \r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Cancel\r\n                </Button>\r\n                    <Button variant=\"primary\" onClick={saveOnClickHandler}>\r\n                        Save Changes\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n    </React.Fragment>\r\n\r\n    );\r\n \r\n};\r\n \r\nexport default EditUserModal;","import React from \"react\";\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {deleteOne} from '../crud'\r\nimport {uriBase, apiVer} from '../config'\r\nimport EditUserModal from './EditUserModal'\r\n\r\nconst UserCard = (props) => {\r\n\r\n    const deleteOnClickHandler = (event) => {\r\n\r\n        deleteOne(`${uriBase}/${apiVer}/users/${props.user.userName}`,props.user)\r\n        .then(result => {\r\n            props.refresh()\r\n        })\r\n        .catch(err => {\r\n            console.log(err.message)\r\n        })\r\n\r\n    }   \r\n\r\n\r\n  return (\r\n    <div>\r\n      <Card style={{ width: \"18rem\" }}>\r\n        <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\r\n        <Card.Body>\r\n          <Card.Title>{props.user.userName}</Card.Title>\r\n          <Card.Text>\r\n            motorcycle goes BRRRRRRRRR\r\n          </Card.Text>\r\n          <EditUserModal user={props.user} refresh={props.refresh}></EditUserModal>\r\n          <Button variant=\"primary\"onClick={deleteOnClickHandler}>Delete</Button>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nexport default UserCard;","import React, {useState, useEffect} from 'react';\r\nimport {getAll} from '../crud' \r\nimport {uriBase, apiVer} from '../config'\r\nimport UserCard from './UserCard'\r\n\r\nconst EditUsers = (props) => {\r\n\r\n    const [user, setUsers] = useState([])\r\n    \r\n    const refresh = () => {\r\n\r\n        getAll(`${uriBase}/${apiVer}/users`)\r\n        .then(allUsers => {\r\n            setUsers(allUsers)\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    useEffect( () => {\r\n        refresh()\r\n    },[])\r\n    \r\n    return (\r\n        <div>\r\n            <h2> users </h2>\r\n            {\r\n                user.map( user => {\r\n                    return <UserCard key={user._id} user={user} refresh={refresh}></UserCard>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditUsers;","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { LoggedInProvider } from \"./LoggedInContext\";\r\nimport ProtectedRoute from \"./ProtectedRoute\"\r\n\r\nimport Signup from \"./Signup\";\r\nimport Login from \"./Login\";\r\nimport Forgotpw from \"./Forgotpw\";\r\nimport Home from \"./Home\";\r\nimport EditUsers from \"./EditUsers\";\r\n\r\nexport default function MainRouter() {\r\n  return (\r\n    <LoggedInProvider>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/signup\" component={Signup}></Route>\r\n          <Route path=\"/login\" component={Login}></Route>\r\n          <Route path=\"/Forgotpw\" component={Forgotpw}></Route>\r\n          <ProtectedRoute path=\"/admin\" component={EditUsers}></ProtectedRoute>\r\n          <Route path=\"/\" component={Home}></Route>\r\n        </Switch>\r\n      </Router>\r\n    </LoggedInProvider>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport MainRouter from './components/MainRouter.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter></MainRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}